########################################################################
# Description:
# Project Tools configuration
########################################################################
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mypackage"
version = "0.1.0"
description = "My package description"
license = "MIT"
authors = ["John Doe <john@doe.com>"]
readme = "README.md"
homepage = "https://github.com/tomoum/python"
repository = "https://github.com/tomoum/python"
documentation = "https://github.com/tomoum/python#readme"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"
pydantic = "^1.10.7"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.0"
black = "^23.3.0"
isort = "^5.12.0"
pylint = "^2.17.2"
pre-commit = "^3.2.2"

[tool.pytest.ini_options]
python_files = "test_*.py"
python_functions = "test_*"
norecursedirs = []

[tool.isort]
profile = "black"

[tool.black]
line-length = 120
fast = true

[tool.pylint]
extension-pkg-whitelist = [
    "numpy",
    "torch",
    "cv2",
    "pyodbc",
    "pydantic",
    "ciso8601",
    "netcdf4",
    "scipy",
]
ignore = "CVS"
ignore-patterns = "test.*?py,conftest.py"
init-hook = 'import sys; sys.setrecursionlimit(8 * sys.getrecursionlimit())'
jobs = 0
limit-inference-results = 100
persistent = "yes"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"
disable = "W1203"
load-plugins="pylint_pytest"

[tool.pylint.'MESSAGES CONTROL']
enable = "c-extension-no-member"

[tool.pylint.'REPORTS']
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
output-format = "text"
reports = "no"
score = "yes"

[tool.pylint.'REFACTORING']
max-nested-blocks = 5
never-returning-functions = "sys.exit"

[tool.pylint.'BASIC']
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar"]
class-attribute-naming-style = "any"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["_"]
include-naming-hint = "yes"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "any"
no-docstring-rgx = "^_"
property-classes = "abc.abstractproperty"
variable-naming-style = "snake_case"

[tool.pylint.'FORMAT']
max-line-length = 120
max-module-lines = 1000

[tool.pylint.'LOGGING']
logging-format-style = "new"
logging-modules = "logging"

[tool.pylint.'SIMILARITIES']
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "yes"
min-similarity-lines = 7

[tool.pylint.'SPELLING']
max-spelling-suggestions = 4
spelling-store-unknown-words = "no"

[tool.pylint.'STRING']
check-str-concat-over-line-jumps = "no"

[tool.pylint.'TYPECHECK']
contextmanager-decorators = "contextlib.contextmanager"
generated-members = "numpy.*,np.*,pyspark.sql.functions,collect_list"
ignore-mixin-members = "yes"
ignore-none = "yes"
ignore-on-opaque-inference = "yes"
ignored-classes = "optparse.Values,thread._local,_thread._local,numpy,torch,swagger_client"
ignored-modules = "numpy,torch,swagger_client,netCDF4,scipy"
missing-member-hint = "yes"
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint.'VARIABLES']
additional-builtins = "dbutils"
allow-global-unused-variables = "yes"
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = "no"
redefining-builtins-modules = "six.moves,past.builtins,future.builtins,builtins,io"

[tool.pylint.'CLASSES']
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = "cls"
valid-metaclass-classmethod-first-arg = "cls"

[tool.pylint.'DESIGN']
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.'IMPORTS']
allow-wildcard-with-all = "no"
analyse-fallback-blocks = "no"
deprecated-modules = "optparse,tkinter.tix"

[tool.pylint.'EXCEPTIONS']
overgeneral-exceptions = ["BaseException", "Exception"]
